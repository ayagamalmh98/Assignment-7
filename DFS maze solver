import java.awt.Point;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Scanner;

public class MAzE {
	int nR = 0;
	int nC = 0;
	char[][] arr;
	stackkk st = new stackkk();
	stackkk ch = new stackkk();
	Point staa;
	Point endd;

	public int[][] solveDFS(java.io.File maze) {

		try {
			int x1 = 0;
			int y1 = 0;
			int x2 = 0;
			int y2 = 0;
			String s = "";

			Scanner x = new Scanner(maze);

			s = x.nextLine();
			while (x.hasNextLine()) {
				s = s + "\n" + x.nextLine();

			}
			System.out.println(s);
			char[] a = s.toCharArray();
			int nS = 0;
			int S1 = 0;
			int S2 = 0;
			for (int i = 0; i < a.length; i++) {
				if (a[i] == ' ') {

					S1 = i;
					break;
				}
			}
			for (int i = 0; i < a.length; i++) {
				if (a[i] == '\n') {
					;
					S2 = i;
					break;
				}
			}

			for (int i = 0; i < S1; i++)
				nR = nR * 10 + Character.getNumericValue(a[i]);
			for (int i = S1 + 1; i < S2; i++)
				nC = nC * 10 + Character.getNumericValue(a[i]);

			for (int i = 2; i < a.length; i++) {
				if (a[i] == '\n') {
					for (int j = i; j < a.length - 1; j++)
						a[j] = a[j + 1];
				}
			}
			for (int g = S2; g < a.length; g++) {
				for (int i = 2; i < a.length; i++) {
					if (a[i] == ' ') {
						for (int j = i; j < a.length - 1; j++)
							a[j] = a[j + 1];
					}
				}
			}

			char[] aa = new char[nR * nC];
			int tt = 0;
			for (int i = 3; tt < nR * nC; i++)
				aa[tt++] = a[i];
			arr = new char[nR][nC];
			for (int i = 0; i < nR; i++)
				for (int j = 0; j < nC; j++)
					arr[i][j] = aa[(i * nC) + j];
			for (int i = 0; i < nR; i++) {
				for (int j = 0; j < nC; j++) {
					if (arr[i][j] == 'S') {
						x1 = i;
						y1 = j;
					}
					if (arr[i][j] == 'E') {
						x2 = i;
						y2 = j;
					}

				}
			}

			staa = new Point(x1, y1);
			endd = new Point(x2, y2);

			if (!(solve(staa.x, staa.y)))
				System.out.println("there is no path!!"); // return or throw s.th!!
			int R = x1;
			int C = y1;
			st.push(staa);
			fn(R, C);
			stackkk.Node current = st.top;
			while (st.top != null)
				ch.push(st.pop());
			int[][] res = new int[ch.size()][2];
			int dd = ch.size();
			for (int i = 0; i < dd; i++) {
				res[i][0] = ch.peek().x;
				res[i][1] = ch.peek().y;
				ch.pop();
			}
			

			return res;

		}

		catch (Exception e) {
			throw new RuntimeException("illegal input");

		}

	}

	public boolean check(Point a) {
		if (a.x == nR || a.y == nC || a.x == -1 || a.y == -1)
			return false;
		if (arr[a.x][a.y] == '#')
			return false;
		stackkk.Node current = st.top;
		while (current != null) {
			if (current.data.x == a.x && current.data.y == a.y)
				return false;
			current = current.next;
		}
		current = ch.top;
		while (current != null) {
			if (current.data.x == a.x && current.data.y == a.y)
				return false;
			current = current.next;
		}

		return true;

	}

	public boolean InStack(Point e) {
		stackkk.Node current = st.top;
		while (current != null) {
			if (current.data.x == e.x && current.data.y == e.y)
				return true;
			current = current.next;
		}
		return false;

	}

	public boolean solve(int row, int column) {

		boolean done = false;

		if (valid(row, column)) {

			arr[row][column] = '!'; // cell has been tried

			if (row == endd.x && column == endd.y)
				done = true; // maze is solved
			else {
				done = solve(row + 1, column); // down
				if (!done)
					done = solve(row, column + 1); // right
				if (!done)
					done = solve(row - 1, column); // up
				if (!done)
					done = solve(row, column - 1); // left
			}
			if (done) // part of the final path
				arr[row][column] = '^';
		}

		return done;

	}

	//////////
	private boolean valid(int row, int column) {

		boolean result = false;

		if (row >= 0 && row < arr.length && column >= 0 && column < arr[0].length)

			if (arr[row][column] != '#' && arr[row][column] != '!')
				result = true;

		return result;

	}

	public stackkk fn(int R, int C) {
		if (R != endd.x || C != endd.y) {

			if (R + 1 < nR && arr[R + 1][C] == '^' && !(InStack(new Point(R + 1, C)))) {
				st.push(new Point(R + 1, C));
				fn(R + 1, C);
			} else if (C + 1 < nC && arr[R][C + 1] == '^' && !(InStack(new Point(R, C + 1)))) {
				st.push(new Point(R, C + 1));
				fn(R, C + 1);
			} else if (R - 1 >= 0 && arr[R - 1][C] == '^' && !(InStack(new Point(R - 1, C)))) {
				st.push(new Point(R - 1, C));
				fn(R - 1, C);
			} else if (C - 1 >= 0 && arr[R][C - 1] == '^' && !(InStack(new Point(R, C - 1)))) {
				st.push(new Point(R, C - 1));
				fn(R, C - 1);
			}
		}
		return st;

	}

}
